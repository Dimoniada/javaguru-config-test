server:
  port: 0

spring:
  main:
    banner-mode: console
  cloud:
    discovery:
      enabled: true
  kafka:
    bootstrap-servers: localhost:9092,localhost:9091
    producer:
      transaction-id-prefix: producer-transaction-${random.value}-
      key-serializer: org.apache.kafka.common.serialization.UUIDSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      retries: 2147483647              # default retries count within delivery timeout
      properties:
        delivery.timeout.ms: 60000     # total time for message delivery including retries, 1m
        request.timeout.ms: 15000      # wait for an acknowledgment, 15s
        retry.backoff.ms: 100          # 100ms between retries

        linger.ms: 5                   # wait 5ms to batch
        batch.size: 16384              # 16KB batches [bytes]
        compression.type: snappy       # batch compression algorithm
        buffer.memory: 33554432        # 32MB sent-buffer size [bytes]

        max.block.ms: 50000            # max blocking time, 50s
        enable.idempotence: true       # prevent duplicates
        acks: all                      # wait for all replicas
        max.in.flight.requests.per.connection: 5 # sent but not yet acknowledged requests count
    consumer:
      isolation-level: read_committed

      key-deserializer: org.apache.kafka.common.serialization.UUIDDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer

      auto-offset-reset: earliest      # consume earliest available message in the partition
      properties:
        spring.deserializer.key.delegate.class: org.apache.kafka.common.serialization.UUIDDeserializer
        spring.deserializer.value.delegate.class: org.springframework.kafka.support.serializer.JsonDeserializer
        request.timeout.ms: 15000      # timeout for pulling "messages" from the broker, 15s
        retry.backoff.ms: 1000         # before attempting to retry a failed request, 1s
        fetch.min.bytes: 1             # minimum data size the server returns from a fetch request
        fetch.max.wait.ms: 500         # max time the server will block before answering the fetch request, 0.5s

# Application-level constants
kafka:
  topics:
    education-response: internal-education-responses
    education-response-dlt: internal-education-responses-dlt
    accounting-request: accounting-allocate-requests
    accounting-request-dlt: accounting-allocate-requests-dlt
    resources-request: resources-check-requests
    resources-request-dlt: resources-check-requests-dlt
    notification-request: notification-send-requests
  error-handler:
    retry:
      attempts: 3                      # for message processing retries
      delay: 1000                      # for delay between retries

springdoc:
  swagger-ui:
    enabled: true

management:
  endpoints:
    web:
      exposure:
        include: mapping,health,env,refresh
  endpoint:
    refresh:
      enabled: true
    env:
      show-values: always
      keys-to-sanitize: []
    health:
      show-details: always
      keys-to-sanitize: []

eureka:
  instance:
    prefer-ip-address: true
    instance-id: ${spring.application.name}-URL
  client:
    service-url:
      defaultZone: http://localhost:8761/eureka

logging:
  level:
    root: INFO
